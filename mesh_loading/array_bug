import "regent"

local cio = terralib.includec("stdio.h")
local clib = terralib.includec("stdlib.h")

terralib.linklibrary("/share/software/user/open/netcdf/4.4.1.1/lib/libnetcdf.so")
local netcdf = terralib.includec("/share/software/user/open/netcdf/4.4.1.1/include/netcdf.h")

local nCells = 2562
local nEdges = 7680
local nVertices = 5120
local maxEdges = 10
local maxEdges2 = 20
local TWO = 2
local vertexDegree = 3
local nVertLevels = 1

local FILE_NAME = "x1.2562.grid.nc"

-----------------------------------------------
------- FIELD SPACES FOR MESH ELEMENTS --------
-----------------------------------------------

-- An edge between two vertices that borders two primal cells. (aka edge)
fspace edge {
    edgesOnEdge_ECP : int[maxEdges2],
    weightsOnEdge : double[maxEdges2]
}

-----------------------------------------------
----- TERRA WRAPPERS FOR NETCDF FUNCTIONS -----
-----------------------------------------------


--Terra function to open the netcdf file and store NCID in the variable passed in.
terra open_file(ncid: &int, file_name: &int8)
	var retval = netcdf.nc_open(file_name, netcdf.NC_NOWRITE, ncid)
    if retval == 1 then 
        cio.printf("Error opening file %s \n", file_name)
    end
end


--Terra function to get the variable ID, given the variable name.
terra get_varid(ncid: int, name: &int8,  varid: &int)
	var retval = netcdf.nc_inq_varid(ncid, name, varid)
    if retval == 1 then 
        cio.printf("Error extracting variable ID of %s\n", name)
    end
end

--Terra function to get the variable values, given the variable ID: For variables with type double.
terra get_var_double(ncid: int, varid: int,  var_array_ptr: &double)
	var retval = netcdf.nc_get_var_double(ncid, varid, var_array_ptr)
    if retval == 1 then 
        cio.printf("Error extracting variable values of variable ID %d\n", varid)
    end
end

--Terra function to get the variable values, given the variable ID: For variables with type int.
terra get_var_int(ncid: int, varid: int,  var_array_ptr: &int)
	var retval = netcdf.nc_get_var_int(ncid, varid, var_array_ptr)
    if retval == 1 then 
        cio.printf("Error extracting variable values of variable ID %d\n", varid)
    end
end

--Tera function to close file given NCID
terra file_close(ncid: int)
	var retval = netcdf.nc_close(ncid)
    if retval == 1 then 
        cio.printf("Error closing file of NCID %d \n", ncid)
    end
end


task main()

    -------------------------------------------
    ----- READ VARIABLES FROM NETCDF FILE -----
    -------------------------------------------
    cio.printf("Starting to read file... \n")
	var ncid : int

    -- Open the file and store the NCID
	open_file(&ncid, FILE_NAME)

    -- Define the variable IDs
	var edgesOnEdge_varid : int
	var weightsOnEdge_varid : int


    -- Define the data structures to store the variable values
	var edgesOnEdge_in : int[nEdges][maxEdges2]
	var weightsOnEdge_in : double[nEdges][maxEdges2]

    
    -- Get the variable IDs of all the variables
	get_varid(ncid, "edgesOnEdge", &edgesOnEdge_varid)
	get_varid(ncid, "weightsOnEdge", &weightsOnEdge_varid)
    
    -- Get the variable values, given the variable IDs (To add: error checking)
    get_var_int(ncid, edgesOnEdge_varid, &edgesOnEdge_in[0][0])
    get_var_double(ncid, weightsOnEdge_varid, &weightsOnEdge_in[0][0])
    

    --------------------------------------------
    ----- CONVERT 2D ARRAYS INTO 1D ARRAYS -----
    --------------------------------------------
    --Ugly code because the netcdf function return the 2d arrays incorrectly, so I covert them to 1d arrays for easy access. 
    -- To look into: there is probably a better way of doing this


    var EE_temp : int[nEdges*maxEdges2]
    var WE_temp : int[nEdges*maxEdges2] 
    var k = 0
    for i = 0, maxEdges2 do 
	    for j = 0, nEdges do
            EE_temp[k] = edgesOnEdge_in[i][j]
            WE_temp[k] = weightsOnEdge_in[i][j]
            --cio.printf("edgesOnEdge: OuterEdge index %d, InnerEdge Index %d is value: %d\n", i, j, edgesOnEdge_in[i][j])
            --cio.printf("edgesOnEdge Array index %d is value: %d \n", k, edgesOnEdge_in[i][j])
            --cio.printf("weightsOnEdge: Weight index %d, Edge Index %d is value: %f\n", i, j, weightsOnEdge_in[i][j])
            --cio.printf("weightsOnEdge Array index %d is value: %f \n", k, weightsOnEdge_in[i][j])
            k = k+1
        end
	end

    -------------------------------------------
    ----- DEFINE INDEX SPACES AND REGIONS -----
    -------------------------------------------

    -- Define index spaces for cell IDs, vertex IDs and edge IDs
    var edge_id_space = ispace(int1d, nEdges)

    -- Define regions
    var edge_region = region(edge_id_space, edge)

    ----------------------------------
    ----- COPY DATA INTO REGIONS -----
    ----------------------------------


    for i = 0, nEdges do
        for j = 0, maxEdges2 do
            edge_region[i].edgesOnEdge_ECP[j] = EE_temp[i*maxEdges2 + j]
            edge_region[i].weightsOnEdge[j] = WE_temp[i*maxEdges2 + j]
            --cio.printf("edgesOnEdge_ECP : InnerEdge %d, OuterEdge %d is %d\n", i, j, edge_region[i].edgesOnEdge_ECP[j])
            --cio.printf("weightsOnEdge : Edge %d: Weight %d is $f\n", i, j, edge_region[i].weightsOnEdge[j])
        end
        
        --cio.printf("Edge: ID is %d, xEdge is %f, yEdge is %f, zEdge is %f \n", i, edge_region[i].x, edge_region[i].y, edge_region[i].z)
    end

     -- Close the file
	file_close(ncid)
    cio.printf("Successfully read file! \n")

end
regentlib.start(main)
